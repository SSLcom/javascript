{
  "name": "Javascript",
  "tagline": "SSL.com JavaScript style guide and ESLint config",
  "body": "# SSL.com JavaScript Style Guide() {\r\n\r\n*A mostly reasonable approach to JavaScript, derived from Airbnb/javascript and made more reasonable*\r\n\r\nOther Style Guides\r\n - [ES5](es5/)\r\n - [React](react/)\r\n - [CSS & Sass](https://github.com/sslcom/css)\r\n - [Ruby](https://github.com/sslcom/ruby)\r\n\r\n## Table of Contents\r\n\r\n  1. [Types](#types)\r\n  1. [References](#references)\r\n  1. [Objects](#objects)\r\n  1. [Arrays](#arrays)\r\n  1. [Destructuring](#destructuring)\r\n  1. [Strings](#strings)\r\n  1. [Functions](#functions)\r\n  1. [Arrow Functions](#arrow-functions)\r\n  1. [Classes & Constructors](#classes--constructors)\r\n  1. [Modules](#modules)\r\n  1. [Iterators and Generators](#iterators-and-generators)\r\n  1. [Properties](#properties)\r\n  1. [Variables](#variables)\r\n  1. [Hoisting](#hoisting)\r\n  1. [Comparison Operators & Equality](#comparison-operators--equality)\r\n  1. [Blocks](#blocks)\r\n  1. [Comments](#comments)\r\n  1. [Whitespace](#whitespace)\r\n  1. [Commas](#commas)\r\n  1. [Semicolons](#semicolons)\r\n  1. [Type Casting & Coercion](#type-casting--coercion)\r\n  1. [Naming Conventions](#naming-conventions)\r\n  1. [Accessors](#accessors)\r\n  1. [Events](#events)\r\n  1. [jQuery](#jquery)\r\n  1. [ECMAScript 5 Compatibility](#ecmascript-5-compatibility)\r\n  1. [ECMAScript 6 Styles](#ecmascript-6-styles)\r\n  1. [Testing](#testing)\r\n  1. [Performance](#performance)\r\n  1. [Resources](#resources)\r\n  1. [In the Wild](#in-the-wild)\r\n  1. [Translation](#translation)\r\n  1. [The JavaScript Style Guide Guide](#the-javascript-style-guide-guide)\r\n  1. [Chat With Us About JavaScript](#chat-with-us-about-javascript)\r\n  1. [Contributors](#contributors)\r\n  1. [License](#license)\r\n\r\n## Types\r\n\r\n  <a name=\"types--primitives\"></a><a name=\"1.1\"></a>\r\n  - [1.1](#types--primitives) **Primitives**: When you access a primitive type you work directly on its value.\r\n\r\n    + `string`\r\n    + `number`\r\n    + `boolean`\r\n    + `null`\r\n    + `undefined`\r\n\r\n    ```javascript\r\n    const foo = 1;\r\n    let bar = foo;\r\n\r\n    bar = 9;\r\n\r\n    console.log(foo, bar); // => 1, 9\r\n    ```\r\n\r\n  <a name=\"types--complex\"></a><a name=\"1.2\"></a>\r\n  - [1.2](#types--complex)  **Complex**: When you access a complex type you work on a reference to its value.\r\n\r\n    + `object`\r\n    + `array`\r\n    + `function`\r\n\r\n    ```javascript\r\n    const foo = [1, 2];\r\n    const bar = foo;\r\n\r\n    bar[0] = 9;\r\n\r\n    console.log(foo[0], bar[0]); // => 9, 9\r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n## References\r\n\r\n  <a name=\"references--prefer-const\"></a><a name=\"2.1\"></a>\r\n  - [2.1](#references--prefer-const) Use `const` for all of your references; avoid using `var`. eslint: [`prefer-const`](http://eslint.org/docs/rules/prefer-const.html), [`no-const-assign`](http://eslint.org/docs/rules/no-const-assign.html)\r\n\r\n    > Why? This ensures that you can't reassign your references, which can lead to bugs and difficult to comprehend code.\r\n\r\n    ```javascript\r\n    // bad\r\n    var a = 1;\r\n    var b = 2;\r\n\r\n    // good\r\n    const a = 1;\r\n    const b = 2;\r\n    ```\r\n\r\n  <a name=\"references--disallow-var\"></a><a name=\"2.2\"></a>\r\n  - [2.2](#references--disallow-var) If you must reassign references, use `let` instead of `var`. eslint: [`no-var`](http://eslint.org/docs/rules/no-var.html)\r\n\r\n    > Why? `let` is block-scoped rather than function-scoped like `var`.\r\n\r\n    ```javascript\r\n    // bad\r\n    var count = 1;\r\n    if (true) {\r\n      count += 1;\r\n    }\r\n\r\n    // good, use the let.\r\n    let count = 1;\r\n    if (true) {\r\n      count += 1;\r\n    }\r\n    ```\r\n\r\n  <a name=\"references--block-scope\"></a><a name=\"2.3\"></a>\r\n  - [2.3](#references--block-scope) Note that both `let` and `const` are block-scoped.\r\n\r\n    ```javascript\r\n    // const and let only exist in the blocks they are defined in.\r\n    {\r\n      let a = 1;\r\n      const b = 1;\r\n    }\r\n    console.log(a); // ReferenceError\r\n    console.log(b); // ReferenceError\r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n## Objects\r\n\r\n  <a name=\"objects--no-new\"></a><a name=\"3.1\"></a>\r\n  - [3.1](#objects--no-new) Use the literal syntax for object creation. eslint: [`no-new-object`](http://eslint.org/docs/rules/no-new-object.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    const item = new Object();\r\n\r\n    // good\r\n    const item = {};\r\n    ```\r\n\r\n  <a name=\"objects--reserved-words\"></a><a name=\"3.2\"></a>\r\n  - [3.2](#objects--reserved-words) If your code will be executed in browsers in script context, don't use [reserved words](http://es5.github.io/#x7.6.1) as keys. It won't work in IE8. [More info](https://github.com/sslcom/javascript/issues/61). It’s OK to use them in ES6 modules and server-side code.\r\n\r\n    ```javascript\r\n    // bad\r\n    const superman = {\r\n      default: { clark: 'kent' },\r\n      private: true,\r\n    };\r\n\r\n    // good\r\n    const superman = {\r\n      defaults: { clark: 'kent' },\r\n      hidden: true,\r\n    };\r\n    ```\r\n\r\n  <a name=\"objects--reserved-words-2\"></a><a name=\"3.3\"></a>\r\n  - [3.3](#objects--reserved-words-2) Use readable synonyms in place of reserved words.\r\n\r\n    ```javascript\r\n    // bad\r\n    const superman = {\r\n      class: 'alien',\r\n    };\r\n\r\n    // bad\r\n    const superman = {\r\n      klass: 'alien',\r\n    };\r\n\r\n    // good\r\n    const superman = {\r\n      type: 'alien',\r\n    };\r\n    ```\r\n\r\n  <a name=\"es6-computed-properties\"></a><a name=\"3.4\"></a>\r\n  - [3.4](#es6-computed-properties) Use computed property names when creating objects with dynamic property names.\r\n\r\n    > Why? They allow you to define all the properties of an object in one place.\r\n\r\n    ```javascript\r\n\r\n    function getKey(k) {\r\n      return `a key named ${k}`;\r\n    }\r\n\r\n    // bad\r\n    const obj = {\r\n      id: 5,\r\n      name: 'San Francisco',\r\n    };\r\n    obj[getKey('enabled')] = true;\r\n\r\n    // good\r\n    const obj = {\r\n      id: 5,\r\n      name: 'San Francisco',\r\n      [getKey('enabled')]: true,\r\n    };\r\n    ```\r\n\r\n  <a name=\"es6-object-shorthand\"></a><a name=\"3.5\"></a>\r\n  - [3.5](#es6-object-shorthand) Use object method shorthand. eslint: [`object-shorthand`](http://eslint.org/docs/rules/object-shorthand.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    const atom = {\r\n      value: 1,\r\n\r\n      addValue: function (value) {\r\n        return atom.value + value;\r\n      },\r\n    };\r\n\r\n    // good\r\n    const atom = {\r\n      value: 1,\r\n\r\n      addValue(value) {\r\n        return atom.value + value;\r\n      },\r\n    };\r\n    ```\r\n\r\n  <a name=\"es6-object-concise\"></a><a name=\"3.6\"></a>\r\n  - [3.6](#es6-object-concise) Use property value shorthand. eslint: [`object-shorthand`](http://eslint.org/docs/rules/object-shorthand.html)\r\n\r\n    > Why? It is shorter to write and descriptive.\r\n\r\n    ```javascript\r\n    const lukeSkywalker = 'Luke Skywalker';\r\n\r\n    // bad\r\n    const obj = {\r\n      lukeSkywalker: lukeSkywalker,\r\n    };\r\n\r\n    // good\r\n    const obj = {\r\n      lukeSkywalker,\r\n    };\r\n    ```\r\n\r\n  <a name=\"objects--grouped-shorthand\"></a><a name=\"3.7\"></a>\r\n  - [3.7](#objects--grouped-shorthand) Group your shorthand properties at the beginning of your object declaration.\r\n\r\n    > Why? It's easier to tell which properties are using the shorthand.\r\n\r\n    ```javascript\r\n    const anakinSkywalker = 'Anakin Skywalker';\r\n    const lukeSkywalker = 'Luke Skywalker';\r\n\r\n    // bad\r\n    const obj = {\r\n      episodeOne: 1,\r\n      twoJediWalkIntoACantina: 2,\r\n      lukeSkywalker,\r\n      episodeThree: 3,\r\n      mayTheFourth: 4,\r\n      anakinSkywalker,\r\n    };\r\n\r\n    // good\r\n    const obj = {\r\n      lukeSkywalker,\r\n      anakinSkywalker,\r\n      episodeOne: 1,\r\n      twoJediWalkIntoACantina: 2,\r\n      episodeThree: 3,\r\n      mayTheFourth: 4,\r\n    };\r\n    ```\r\n\r\n  <a name=\"objects--quoted-props\"></a><a name=\"3.8\"></a>\r\n  - [3.8](#objects--quoted-props) Only quote properties that are invalid identifiers. eslint: [`quote-props`](http://eslint.org/docs/rules/quote-props.html)\r\n\r\n  > Why? In general we consider it subjectively easier to read. It improves syntax highlighting, and is also more easily optimized by many JS engines.\r\n\r\n  ```javascript\r\n  // bad\r\n  const bad = {\r\n    'foo': 3,\r\n    'bar': 4,\r\n    'data-blah': 5,\r\n  };\r\n\r\n  // good\r\n  const good = {\r\n    foo: 3,\r\n    bar: 4,\r\n    'data-blah': 5,\r\n  };\r\n  ```\r\n\r\n  <a name=\"objects--prototype-builtins\"></a>\r\n  - [3.9](#objects--prototype-builtins) Do not call `Object.prototype` methods directly, such as `hasOwnProperty`, `propertyIsEnumerable`, and `isPrototypeOf`.\r\n\r\n  > Why? These methods may be shadowed by properties on the object in question - consider `{ hasOwnProperty: false }` - or, the object may be a null object (`Object.create(null)`).\r\n\r\n  ```javascript\r\n  // bad\r\n  console.log(object.hasOwnProperty(key));\r\n\r\n  // good\r\n  console.log(Object.prototype.hasOwnProperty.call(object, key));\r\n\r\n  // best\r\n  const has = Object.prototype.hasOwnProperty; // cache the lookup once, in module scope.\r\n  /* or */\r\n  const has = require('has');\r\n  …\r\n  console.log(has.call(object, key));\r\n  ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n## Arrays\r\n\r\n  <a name=\"arrays--literals\"></a><a name=\"4.1\"></a>\r\n  - [4.1](#arrays--literals) Use the literal syntax for array creation. eslint: [`no-array-constructor`](http://eslint.org/docs/rules/no-array-constructor.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    const items = new Array();\r\n\r\n    // good\r\n    const items = [];\r\n    ```\r\n\r\n  <a name=\"arrays--push\"></a><a name=\"4.2\"></a>\r\n  - [4.2](#arrays--push) Use [Array#push](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push) instead of direct assignment to add items to an array.\r\n\r\n    ```javascript\r\n    const someStack = [];\r\n\r\n    // bad\r\n    someStack[someStack.length] = 'abracadabra';\r\n\r\n    // good\r\n    someStack.push('abracadabra');\r\n    ```\r\n\r\n  <a name=\"es6-array-spreads\"></a><a name=\"4.3\"></a>\r\n  - [4.3](#es6-array-spreads) Use array spreads `...` to copy arrays.\r\n\r\n    ```javascript\r\n    // bad\r\n    const len = items.length;\r\n    const itemsCopy = [];\r\n    let i;\r\n\r\n    for (i = 0; i < len; i++) {\r\n      itemsCopy[i] = items[i];\r\n    }\r\n\r\n    // good\r\n    const itemsCopy = [...items];\r\n    ```\r\n\r\n  <a name=\"arrays--from\"></a><a name=\"4.4\"></a>\r\n  - [4.4](#arrays--from) To convert an array-like object to an array, use [Array.from](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from).\r\n\r\n    ```javascript\r\n    const foo = document.querySelectorAll('.foo');\r\n    const nodes = Array.from(foo);\r\n    ```\r\n\r\n  <a name=\"arrays--callback-return\"></a><a name=\"4.5\"></a>\r\n  - [4.5](#arrays--callback-return) Use return statements in array method callbacks. It's ok to omit the return if the function body consists of a single statement following [8.2](#8.2). eslint: [`array-callback-return`](http://eslint.org/docs/rules/array-callback-return)\r\n\r\n    ```javascript\r\n    // good\r\n    [1, 2, 3].map((x) => {\r\n      const y = x + 1;\r\n      return x * y;\r\n    });\r\n\r\n    // good\r\n    [1, 2, 3].map(x => x + 1);\r\n\r\n    // bad\r\n    const flat = {};\r\n    [[0, 1], [2, 3], [4, 5]].reduce((memo, item, index) => {\r\n      const flatten = memo.concat(item);\r\n      flat[index] = flatten;\r\n    });\r\n\r\n    // good\r\n    const flat = {};\r\n    [[0, 1], [2, 3], [4, 5]].reduce((memo, item, index) => {\r\n      const flatten = memo.concat(item);\r\n      flat[index] = flatten;\r\n      return flatten;\r\n    });\r\n\r\n    // bad\r\n    inbox.filter((msg) => {\r\n      const { subject, author } = msg;\r\n      if (subject === 'Mockingbird') {\r\n        return author === 'Harper Lee';\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n\r\n    // good\r\n    inbox.filter((msg) => {\r\n      const { subject, author } = msg;\r\n      if (subject === 'Mockingbird') {\r\n        return author === 'Harper Lee';\r\n      }\r\n\r\n      return false;\r\n    });\r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n## Destructuring\r\n\r\n  <a name=\"destructuring--object\"></a><a name=\"5.1\"></a>\r\n  - [5.1](#destructuring--object) Use object destructuring when accessing and using multiple properties of an object.\r\n\r\n    > Why? Destructuring saves you from creating temporary references for those properties.\r\n\r\n    ```javascript\r\n    // bad\r\n    function getFullName(user) {\r\n      const firstName = user.firstName;\r\n      const lastName = user.lastName;\r\n\r\n      return `${firstName} ${lastName}`;\r\n    }\r\n\r\n    // good\r\n    function getFullName(user) {\r\n      const { firstName, lastName } = user;\r\n      return `${firstName} ${lastName}`;\r\n    }\r\n\r\n    // best\r\n    function getFullName({ firstName, lastName }) {\r\n      return `${firstName} ${lastName}`;\r\n    }\r\n    ```\r\n\r\n  <a name=\"destructuring--array\"></a><a name=\"5.2\"></a>\r\n  - [5.2](#destructuring--array) Use array destructuring.\r\n\r\n    ```javascript\r\n    const arr = [1, 2, 3, 4];\r\n\r\n    // bad\r\n    const first = arr[0];\r\n    const second = arr[1];\r\n\r\n    // good\r\n    const [first, second] = arr;\r\n    ```\r\n\r\n  <a name=\"destructuring--object-over-array\"></a><a name=\"5.3\"></a>\r\n  - [5.3](#destructuring--object-over-array) Use object destructuring for multiple return values, not array destructuring.\r\n\r\n    > Why? You can add new properties over time or change the order of things without breaking call sites.\r\n\r\n    ```javascript\r\n    // bad\r\n    function processInput(input) {\r\n      // then a miracle occurs\r\n      return [left, right, top, bottom];\r\n    }\r\n\r\n    // the caller needs to think about the order of return data\r\n    const [left, __, top] = processInput(input);\r\n\r\n    // good\r\n    function processInput(input) {\r\n      // then a miracle occurs\r\n      return { left, right, top, bottom };\r\n    }\r\n\r\n    // the caller selects only the data they need\r\n    const { left, top } = processInput(input);\r\n    ```\r\n\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n## Strings\r\n\r\n  <a name=\"strings--quotes\"></a><a name=\"6.1\"></a>\r\n  - [6.1](#strings--quotes) Use single quotes `''` for strings. eslint: [`quotes`](http://eslint.org/docs/rules/quotes.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    const name = \"Capt. Janeway\";\r\n\r\n    // good\r\n    const name = 'Capt. Janeway';\r\n    ```\r\n\r\n  <a name=\"strings--line-length\"></a><a name=\"6.2\"></a>\r\n  - [6.2](#strings--line-length) Strings that cause the line to go over 100 characters should be written across multiple lines using string concatenation.\r\n\r\n  <a name=\"strings--concat-perf\"></a><a name=\"6.3\"></a>\r\n  - [6.3](#strings--concat-perf) Note: If overused, long strings with concatenation could impact performance. [jsPerf](http://jsperf.com/ya-string-concat) & [Discussion](https://github.com/sslcom/javascript/issues/40).\r\n\r\n    ```javascript\r\n    // bad\r\n    const errorMessage = 'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.';\r\n\r\n    // bad\r\n    const errorMessage = 'This is a super long error that was thrown because \\\r\n    of Batman. When you stop to think about how Batman had anything to do \\\r\n    with this, you would get nowhere \\\r\n    fast.';\r\n\r\n    // good\r\n    const errorMessage = 'This is a super long error that was thrown because ' +\r\n      'of Batman. When you stop to think about how Batman had anything to do ' +\r\n      'with this, you would get nowhere fast.';\r\n    ```\r\n\r\n  <a name=\"es6-template-literals\"></a><a name=\"6.4\"></a>\r\n  - [6.4](#es6-template-literals) When programmatically building up strings, use template strings instead of concatenation. eslint: [`prefer-template`](http://eslint.org/docs/rules/prefer-template.html) [`template-curly-spacing`](http://eslint.org/docs/rules/template-curly-spacing)\r\n\r\n    > Why? Template strings give you a readable, concise syntax with proper newlines and string interpolation features.\r\n\r\n    ```javascript\r\n    // bad\r\n    function sayHi(name) {\r\n      return 'How are you, ' + name + '?';\r\n    }\r\n\r\n    // bad\r\n    function sayHi(name) {\r\n      return ['How are you, ', name, '?'].join();\r\n    }\r\n\r\n    // bad\r\n    function sayHi(name) {\r\n      return `How are you, ${ name }?`;\r\n    }\r\n\r\n    // good\r\n    function sayHi(name) {\r\n      return `How are you, ${name}?`;\r\n    }\r\n    ```\r\n\r\n  <a name=\"strings--eval\"></a><a name=\"6.5\"></a>\r\n  - [6.5](#strings--eval) Never use `eval()` on a string, it opens too many vulnerabilities.\r\n\r\n  <a name=\"strings--escaping\"></a>\r\n  - [6.6](#strings--escaping) Do not unnecessarily escape characters in strings. eslint: [`no-useless-escape`](http://eslint.org/docs/rules/no-useless-escape)\r\n\r\n    > Why? Backslashes harm readability, thus they should only be present when necessary.\r\n\r\n    ```javascript\r\n    // bad\r\n    const foo = '\\'this\\' \\i\\s \\\"quoted\\\"';\r\n\r\n    // good\r\n    const foo = '\\'this\\' is \"quoted\"';\r\n    const foo = `'this' is \"quoted\"`;\r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## Functions\r\n\r\n  <a name=\"functions--declarations\"></a><a name=\"7.1\"></a>\r\n  - [7.1](#functions--declarations) Use function declarations instead of function expressions.\r\n\r\n    > Why? Function declarations are named, so they're easier to identify in call stacks. Also, the whole body of a function declaration is hoisted, whereas only the reference of a function expression is hoisted. This rule makes it possible to always use [Arrow Functions](#arrow-functions) in place of function expressions.\r\n\r\n    ```javascript\r\n    // bad\r\n    const foo = function () {\r\n    };\r\n\r\n    // good\r\n    function foo() {\r\n    }\r\n    ```\r\n\r\n  <a name=\"functions--iife\"></a><a name=\"7.2\"></a>\r\n  - [7.2](#functions--iife) Wrap immediately invoked function expressions in parentheses. eslint: [`wrap-iife`](http://eslint.org/docs/rules/wrap-iife.html)\r\n\r\n    > Why? An immediately invoked function expression is a single unit - wrapping both it, and its invocation parens, in parens, cleanly expresses this. Note that in a world with modules everywhere, you almost never need an IIFE.\r\n\r\n    ```javascript\r\n    // immediately-invoked function expression (IIFE)\r\n    (function () {\r\n      console.log('Welcome to the Internet. Please follow me.');\r\n    }());\r\n    ```\r\n\r\n  <a name=\"functions--in-blocks\"></a><a name=\"7.3\"></a>\r\n  - [7.3](#functions--in-blocks) Never declare a function in a non-function block (if, while, etc). Assign the function to a variable instead. Browsers will allow you to do it, but they all interpret it differently, which is bad news bears. eslint: [`no-loop-func`](http://eslint.org/docs/rules/no-loop-func.html)\r\n\r\n  <a name=\"functions--note-on-blocks\"></a><a name=\"7.4\"></a>\r\n  - [7.4](#functions--note-on-blocks) **Note:** ECMA-262 defines a `block` as a list of statements. A function declaration is not a statement. [Read ECMA-262's note on this issue](http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf#page=97).\r\n\r\n    ```javascript\r\n    // bad\r\n    if (currentUser) {\r\n      function test() {\r\n        console.log('Nope.');\r\n      }\r\n    }\r\n\r\n    // good\r\n    let test;\r\n    if (currentUser) {\r\n      test = () => {\r\n        console.log('Yup.');\r\n      };\r\n    }\r\n    ```\r\n\r\n  <a name=\"functions--arguments-shadow\"></a><a name=\"7.5\"></a>\r\n  - [7.5](#functions--arguments-shadow) Never name a parameter `arguments`. This will take precedence over the `arguments` object that is given to every function scope.\r\n\r\n    ```javascript\r\n    // bad\r\n    function nope(name, options, arguments) {\r\n      // ...stuff...\r\n    }\r\n\r\n    // good\r\n    function yup(name, options, args) {\r\n      // ...stuff...\r\n    }\r\n    ```\r\n\r\n  <a name=\"es6-rest\"></a><a name=\"7.6\"></a>\r\n  - [7.6](#es6-rest) Never use `arguments`, opt to use rest syntax `...` instead. eslint: [`prefer-rest-params`](http://eslint.org/docs/rules/prefer-rest-params)\r\n\r\n    > Why? `...` is explicit about which arguments you want pulled. Plus, rest arguments are a real Array, and not merely Array-like like `arguments`.\r\n\r\n    ```javascript\r\n    // bad\r\n    function concatenateAll() {\r\n      const args = Array.prototype.slice.call(arguments);\r\n      return args.join('');\r\n    }\r\n\r\n    // good\r\n    function concatenateAll(...args) {\r\n      return args.join('');\r\n    }\r\n    ```\r\n\r\n  <a name=\"es6-default-parameters\"></a><a name=\"7.7\"></a>\r\n  - [7.7](#es6-default-parameters) Use default parameter syntax rather than mutating function arguments.\r\n\r\n    ```javascript\r\n    // really bad\r\n    function handleThings(opts) {\r\n      // No! We shouldn't mutate function arguments.\r\n      // Double bad: if opts is falsy it'll be set to an object which may\r\n      // be what you want but it can introduce subtle bugs.\r\n      opts = opts || {};\r\n      // ...\r\n    }\r\n\r\n    // still bad\r\n    function handleThings(opts) {\r\n      if (opts === void 0) {\r\n        opts = {};\r\n      }\r\n      // ...\r\n    }\r\n\r\n    // good\r\n    function handleThings(opts = {}) {\r\n      // ...\r\n    }\r\n    ```\r\n\r\n  <a name=\"functions--default-side-effects\"></a><a name=\"7.8\"></a>\r\n  - [7.8](#functions--default-side-effects) Avoid side effects with default parameters.\r\n\r\n    > Why? They are confusing to reason about.\r\n\r\n    ```javascript\r\n    var b = 1;\r\n    // bad\r\n    function count(a = b++) {\r\n      console.log(a);\r\n    }\r\n    count();  // 1\r\n    count();  // 2\r\n    count(3); // 3\r\n    count();  // 3\r\n    ```\r\n\r\n  <a name=\"functions--defaults-last\"></a><a name=\"7.9\"></a>\r\n  - [7.9](#functions--defaults-last) Always put default parameters last.\r\n\r\n    ```javascript\r\n    // bad\r\n    function handleThings(opts = {}, name) {\r\n      // ...\r\n    }\r\n\r\n    // good\r\n    function handleThings(name, opts = {}) {\r\n      // ...\r\n    }\r\n    ```\r\n\r\n  <a name=\"functions--constructor\"></a><a name=\"7.10\"></a>\r\n  - [7.10](#functions--constructor) Never use the Function constructor to create a new function.\r\n\r\n    > Why? Creating a function in this way evaluates a string similarly to eval(), which opens vulnerabilities.\r\n\r\n    ```javascript\r\n    // bad\r\n    var add = new Function('a', 'b', 'return a + b');\r\n\r\n    // still bad\r\n    var subtract = Function('a', 'b', 'return a - b');\r\n    ```\r\n\r\n  <a name=\"functions--signature-spacing\"></a><a name=\"7.11\"></a>\r\n  - [7.11](#functions--signature-spacing) Spacing in a function signature.\r\n\r\n    > Why? Consistency is good, and you shouldn’t have to add or remove a space when adding or removing a name.\r\n\r\n    ```javascript\r\n    // bad\r\n    const f = function(){};\r\n    const g = function (){};\r\n    const h = function() {};\r\n\r\n    // good\r\n    const x = function () {};\r\n    const y = function a() {};\r\n    ```\r\n\r\n  <a name=\"functions--mutate-params\"></a><a name=\"7.12\"></a>\r\n  - [7.12](#functions--mutate-params) Never mutate parameters. eslint: [`no-param-reassign`](http://eslint.org/docs/rules/no-param-reassign.html)\r\n\r\n    > Why? Manipulating objects passed in as parameters can cause unwanted variable side effects in the original caller.\r\n\r\n    ```javascript\r\n    // bad\r\n    function f1(obj) {\r\n      obj.key = 1;\r\n    };\r\n\r\n    // good\r\n    function f2(obj) {\r\n      const key = Object.prototype.hasOwnProperty.call(obj, 'key') ? obj.key : 1;\r\n    };\r\n    ```\r\n\r\n  <a name=\"functions--reassign-params\"></a><a name=\"7.13\"></a>\r\n  - [7.13](#functions--reassign-params) Never reassign parameters. eslint: [`no-param-reassign`](http://eslint.org/docs/rules/no-param-reassign.html)\r\n\r\n    > Why? Reassigning parameters can lead to unexpected behavior, especially when accessing the `arguments` object. It can also cause optimization issues, especially in V8.\r\n\r\n    ```javascript\r\n    // bad\r\n    function f1(a) {\r\n      a = 1;\r\n    }\r\n\r\n    function f2(a) {\r\n      if (!a) { a = 1; }\r\n    }\r\n\r\n    // good\r\n    function f3(a) {\r\n      const b = a || 1;\r\n    }\r\n\r\n    function f4(a = 1) {\r\n    }\r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n## Arrow Functions\r\n\r\n  <a name=\"arrows--use-them\"></a><a name=\"8.1\"></a>\r\n  - [8.1](#arrows--use-them) When you must use function expressions (as when passing an anonymous function), use arrow function notation. eslint: [`prefer-arrow-callback`](http://eslint.org/docs/rules/prefer-arrow-callback.html), [`arrow-spacing`](http://eslint.org/docs/rules/arrow-spacing.html)\r\n\r\n    > Why? It creates a version of the function that executes in the context of `this`, which is usually what you want, and is a more concise syntax.\r\n\r\n    > Why not? If you have a fairly complicated function, you might move that logic out into its own function declaration.\r\n\r\n    ```javascript\r\n    // bad\r\n    [1, 2, 3].map(function (x) {\r\n      const y = x + 1;\r\n      return x * y;\r\n    });\r\n\r\n    // good\r\n    [1, 2, 3].map((x) => {\r\n      const y = x + 1;\r\n      return x * y;\r\n    });\r\n    ```\r\n\r\n  <a name=\"arrows--implicit-return\"></a><a name=\"8.2\"></a>\r\n  - [8.2](#arrows--implicit-return) If the function body consists of a single expression, omit the braces and use the implicit return. Otherwise, keep the braces and use a `return` statement. eslint: [`arrow-parens`](http://eslint.org/docs/rules/arrow-parens.html), [`arrow-body-style`](http://eslint.org/docs/rules/arrow-body-style.html) jscs:  [`disallowParenthesesAroundArrowParam`](http://jscs.info/rule/disallowParenthesesAroundArrowParam), [`requireShorthandArrowFunctions`](http://jscs.info/rule/requireShorthandArrowFunctions)\r\n\r\n    > Why? Syntactic sugar. It reads well when multiple functions are chained together.\r\n\r\n    ```javascript\r\n    // bad\r\n    [1, 2, 3].map(number => {\r\n      const nextNumber = number + 1;\r\n      `A string containing the ${nextNumber}.`;\r\n    });\r\n\r\n    // good\r\n    [1, 2, 3].map(number => `A string containing the ${number}.`);\r\n\r\n    // good\r\n    [1, 2, 3].map((number) => {\r\n      const nextNumber = number + 1;\r\n      return `A string containing the ${nextNumber}.`;\r\n    });\r\n\r\n    // good\r\n    [1, 2, 3].map((number, index) => ({\r\n      index: number\r\n    }));\r\n    ```\r\n\r\n  <a name=\"arrows--paren-wrap\"></a><a name=\"8.3\"></a>\r\n  - [8.3](#arrows--paren-wrap) In case the expression spans over multiple lines, wrap it in parentheses for better readability.\r\n\r\n    > Why? It shows clearly where the function starts and ends.\r\n\r\n    ```js\r\n    // bad\r\n    [1, 2, 3].map(number => 'As time went by, the string containing the ' +\r\n      `${number} became much longer. So we needed to break it over multiple ` +\r\n      'lines.'\r\n    );\r\n\r\n    // good\r\n    [1, 2, 3].map(number => (\r\n      `As time went by, the string containing the ${number} became much ` +\r\n      'longer. So we needed to break it over multiple lines.'\r\n    ));\r\n    ```\r\n\r\n  <a name=\"arrows--one-arg-parens\"></a><a name=\"8.4\"></a>\r\n  - [8.4](#arrows--one-arg-parens) If your function takes a single argument and doesn’t use braces, omit the parentheses. Otherwise, always include parentheses around arguments. eslint: [`arrow-parens`](http://eslint.org/docs/rules/arrow-parens.html) jscs:  [`disallowParenthesesAroundArrowParam`](http://jscs.info/rule/disallowParenthesesAroundArrowParam)\r\n\r\n    > Why? Less visual clutter.\r\n\r\n    ```js\r\n    // bad\r\n    [1, 2, 3].map((x) => x * x);\r\n\r\n    // good\r\n    [1, 2, 3].map(x => x * x);\r\n\r\n    // good\r\n    [1, 2, 3].map(number => (\r\n      `A long string with the ${number}. It’s so long that we’ve broken it ` +\r\n      'over multiple lines!'\r\n    ));\r\n\r\n    // bad\r\n    [1, 2, 3].map(x => {\r\n      const y = x + 1;\r\n      return x * y;\r\n    });\r\n\r\n    // good\r\n    [1, 2, 3].map((x) => {\r\n      const y = x + 1;\r\n      return x * y;\r\n    });\r\n    ```\r\n\r\n  <a name=\"arrows--confusing\"></a><a name=\"8.5\"></a>\r\n  - [8.5](#arrows--confusing) Avoid confusing arrow function syntax (`=>`) with comparison operators (`<=`, `>=`). eslint: [`no-confusing-arrow`](http://eslint.org/docs/rules/no-confusing-arrow)\r\n\r\n    ```js\r\n    // bad\r\n    const itemHeight = item => item.height > 256 ? item.largeSize : item.smallSize;\r\n\r\n    // bad\r\n    const itemHeight = (item) => item.height > 256 ? item.largeSize : item.smallSize;\r\n\r\n    // good\r\n    const itemHeight = item => (item.height > 256 ? item.largeSize : item.smallSize);\r\n\r\n    // good\r\n    const itemHeight = (item) => {\r\n      const { height, largeSize, smallSize } = item;\r\n      return height > 256 ? largeSize : smallSize;\r\n    };\r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## Classes & Constructors\r\n\r\n  <a name=\"constructors--use-class\"></a><a name=\"9.1\"></a>\r\n  - [9.1](#constructors--use-class) Always use `class`. Avoid manipulating `prototype` directly.\r\n\r\n    > Why? `class` syntax is more concise and easier to reason about.\r\n\r\n    ```javascript\r\n    // bad\r\n    function Queue(contents = []) {\r\n      this.queue = [...contents];\r\n    }\r\n    Queue.prototype.pop = function () {\r\n      const value = this.queue[0];\r\n      this.queue.splice(0, 1);\r\n      return value;\r\n    };\r\n\r\n\r\n    // good\r\n    class Queue {\r\n      constructor(contents = []) {\r\n        this.queue = [...contents];\r\n      }\r\n      pop() {\r\n        const value = this.queue[0];\r\n        this.queue.splice(0, 1);\r\n        return value;\r\n      }\r\n    }\r\n    ```\r\n\r\n  <a name=\"constructors--extends\"></a><a name=\"9.2\"></a>\r\n  - [9.2](#constructors--extends) Use `extends` for inheritance.\r\n\r\n    > Why? It is a built-in way to inherit prototype functionality without breaking `instanceof`.\r\n\r\n    ```javascript\r\n    // bad\r\n    const inherits = require('inherits');\r\n    function PeekableQueue(contents) {\r\n      Queue.apply(this, contents);\r\n    }\r\n    inherits(PeekableQueue, Queue);\r\n    PeekableQueue.prototype.peek = function () {\r\n      return this._queue[0];\r\n    }\r\n\r\n    // good\r\n    class PeekableQueue extends Queue {\r\n      peek() {\r\n        return this._queue[0];\r\n      }\r\n    }\r\n    ```\r\n\r\n  <a name=\"constructors--chaining\"></a><a name=\"9.3\"></a>\r\n  - [9.3](#constructors--chaining) Methods can return `this` to help with method chaining.\r\n\r\n    ```javascript\r\n    // bad\r\n    Jedi.prototype.jump = function () {\r\n      this.jumping = true;\r\n      return true;\r\n    };\r\n\r\n    Jedi.prototype.setHeight = function (height) {\r\n      this.height = height;\r\n    };\r\n\r\n    const luke = new Jedi();\r\n    luke.jump(); // => true\r\n    luke.setHeight(20); // => undefined\r\n\r\n    // good\r\n    class Jedi {\r\n      jump() {\r\n        this.jumping = true;\r\n        return this;\r\n      }\r\n\r\n      setHeight(height) {\r\n        this.height = height;\r\n        return this;\r\n      }\r\n    }\r\n\r\n    const luke = new Jedi();\r\n\r\n    luke.jump()\r\n      .setHeight(20);\r\n    ```\r\n\r\n\r\n  <a name=\"constructors--tostring\"></a><a name=\"9.4\"></a>\r\n  - [9.4](#constructors--tostring) It's okay to write a custom toString() method, just make sure it works successfully and causes no side effects.\r\n\r\n    ```javascript\r\n    class Jedi {\r\n      constructor(options = {}) {\r\n        this.name = options.name || 'no name';\r\n      }\r\n\r\n      getName() {\r\n        return this.name;\r\n      }\r\n\r\n      toString() {\r\n        return `Jedi - ${this.getName()}`;\r\n      }\r\n    }\r\n    ```\r\n\r\n  <a name=\"constructors--no-useless\"></a><a name=\"9.5\"></a>\r\n  - [9.5](#constructors--no-useless) Classes have a default constructor if one is not specified. An empty constructor function or one that just delegates to a parent class is unnecessary. eslint: [`no-useless-constructor`](http://eslint.org/docs/rules/no-useless-constructor)\r\n\r\n    ```javascript\r\n    // bad\r\n    class Jedi {\r\n      constructor() {}\r\n\r\n      getName() {\r\n        return this.name;\r\n      }\r\n    }\r\n\r\n    // bad\r\n    class Rey extends Jedi {\r\n      constructor(...args) {\r\n        super(...args);\r\n      }\r\n    }\r\n\r\n    // good\r\n    class Rey extends Jedi {\r\n      constructor(...args) {\r\n        super(...args);\r\n        this.name = 'Rey';\r\n      }\r\n    }\r\n    ```\r\n\r\n  <a name=\"classes--no-duplicate-members\"></a>\r\n  - [9.6](#classes--no-duplicate-members) Avoid duplicate class members. eslint: [`no-dupe-class-members`](http://eslint.org/docs/rules/no-dupe-class-members)\r\n\r\n    > Why? Duplicate class member declarations will silently prefer the last one - having duplicates is almost certainly a bug.\r\n\r\n    ```javascript\r\n    // bad\r\n    class Foo {\r\n      bar() { return 1; }\r\n      bar() { return 2; }\r\n    }\r\n\r\n    // good\r\n    class Foo {\r\n      bar() { return 1; }\r\n    }\r\n\r\n    // good\r\n    class Foo {\r\n      bar() { return 2; }\r\n    }\r\n    ```\r\n\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## Modules\r\n\r\n  <a name=\"modules--use-them\"></a><a name=\"10.1\"></a>\r\n  - [10.1](#modules--use-them) Always use modules (`import`/`export`) over a non-standard module system. You can always transpile to your preferred module system.\r\n\r\n    > Why? Modules are the future, let's start using the future now.\r\n\r\n    ```javascript\r\n    // bad\r\n    const SslcomStyleGuide = require('./SslcomStyleGuide');\r\n    module.exports = SslcomStyleGuide.es6;\r\n\r\n    // ok\r\n    import SslcomStyleGuide from './SslcomStyleGuide';\r\n    export default SslcomStyleGuide.es6;\r\n\r\n    // best\r\n    import { es6 } from './SslcomStyleGuide';\r\n    export default es6;\r\n    ```\r\n\r\n  <a name=\"modules--no-wildcard\"></a><a name=\"10.2\"></a>\r\n  - [10.2](#modules--no-wildcard) Do not use wildcard imports.\r\n\r\n    > Why? This makes sure you have a single default export.\r\n\r\n    ```javascript\r\n    // bad\r\n    import * as SslcomStyleGuide from './SslcomStyleGuide';\r\n\r\n    // good\r\n    import SslcomStyleGuide from './SslcomStyleGuide';\r\n    ```\r\n\r\n  <a name=\"modules--no-export-from-import\"></a><a name=\"10.3\"></a>\r\n  - [10.3](#modules--no-export-from-import) And do not export directly from an import.\r\n\r\n    > Why? Although the one-liner is concise, having one clear way to import and one clear way to export makes things consistent.\r\n\r\n    ```javascript\r\n    // bad\r\n    // filename es6.js\r\n    export { es6 as default } from './sslcomStyleGuide';\r\n\r\n    // good\r\n    // filename es6.js\r\n    import { es6 } from './SslcomStyleGuide';\r\n    export default es6;\r\n    ```\r\n\r\n  <a name=\"modules--no-duplicate-imports\"></a>\r\n  - [10.4](#modules--no-duplicate-imports) Only import from a path in one place.\r\n eslint: [`no-duplicate-imports`](http://eslint.org/docs/rules/no-duplicate-imports)\r\n    > Why? Having multiple lines that import from the same path can make code harder to maintain.\r\n\r\n    ```javascript\r\n    // bad\r\n    import foo from 'foo';\r\n    // … some other imports … //\r\n    import { named1, named2 } from 'foo';\r\n\r\n    // good\r\n    import foo, { named1, named2 } from 'foo';\r\n\r\n    // good\r\n    import foo, {\r\n      named1,\r\n      named2,\r\n    } from 'foo';\r\n    ```\r\n\r\n  <a name=\"modules--no-mutable-exports\"></a>\r\n  - [10.5](#modules--no-mutable-exports) Do not export mutable bindings.\r\n eslint: [`import/no-mutable-exports`](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-mutable-exports.md)\r\n    > Why? Mutation should be avoided in general, but in particular when exporting mutable bindings. While this technique may be needed for some special cases, in general, only constant references should be exported.\r\n\r\n    ```javascript\r\n    // bad\r\n    let foo = 3;\r\n    export { foo }\r\n\r\n    // good\r\n    const foo = 3;\r\n    export { foo }\r\n    ```\r\n\r\n  <a name=\"modules--prefer-default-export\"></a>\r\n  - [10.6](#modules--prefer-default-export) In modules with a single export, prefer default export over named export.\r\n eslint: [`import/prefer-default-export`](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/prefer-default-export.md)\r\n\r\n    ```javascript\r\n    // bad\r\n    export function foo() {}\r\n\r\n    // good\r\n    export default function foo() {}\r\n    ```\r\n\r\n  <a name=\"modules--imports-first\"></a>\r\n  - [10.7](#modules--imports-first) Put all `import`s above non-import statements.\r\n eslint: [`import/imports-first`](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/imports-first.md)\r\n    > Why? Since `import`s are hoisted, keeping them all at the top prevents surprising behavior.\r\n\r\n    ```javascript\r\n    // bad\r\n    import foo from 'foo';\r\n    foo.init();\r\n\r\n    import bar from 'bar';\r\n\r\n    // good\r\n    import foo from 'foo';\r\n    import bar from 'bar';\r\n\r\n    foo.init();\r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n## Iterators and Generators\r\n\r\n  <a name=\"iterators--nope\"></a><a name=\"11.1\"></a>\r\n  - [11.1](#iterators--nope) Don't use iterators. Prefer JavaScript's higher-order functions instead of loops like `for-in` or `for-of`. eslint: [`no-iterator`](http://eslint.org/docs/rules/no-iterator.html) [`no-restricted-syntax`](http://eslint.org/docs/rules/no-restricted-syntax)\r\n\r\n    > Why? This enforces our immutable rule. Dealing with pure functions that return values is easier to reason about than side effects.\r\n\r\n    > Use `map()` / `every()` / `filter()` / `find()` / `findIndex()` / `reduce()` / `some()` / ... to iterate over arrays, and `Object.keys()` / `Object.values()` / `Object.entries()` to produce arrays so you can iterate over objects.\r\n\r\n    ```javascript\r\n    const numbers = [1, 2, 3, 4, 5];\r\n\r\n    // bad\r\n    let sum = 0;\r\n    for (let num of numbers) {\r\n      sum += num;\r\n    }\r\n\r\n    sum === 15;\r\n\r\n    // good\r\n    let sum = 0;\r\n    numbers.forEach(num => sum += num);\r\n    sum === 15;\r\n\r\n    // best (use the functional force)\r\n    const sum = numbers.reduce((total, num) => total + num, 0);\r\n    sum === 15;\r\n    ```\r\n\r\n  <a name=\"generators--nope\"></a><a name=\"11.2\"></a>\r\n  - [11.2](#generators--nope) Don't use generators for now.\r\n\r\n    > Why? They don't transpile well to ES5.\r\n\r\n  <a name=\"generators--spacing\"></a>\r\n  - [11.3](#generators--spacing) If you must use generators, or if you disregard [our advice](#generators--nope), make sure their function signature is spaced properly. eslint: [`generator-star-spacing`](http://eslint.org/docs/rules/generator-star-spacing)\r\n\r\n    > Why? `function` and `*` are part of the same conceptual keyword - `*` is not a modifier for `function`, `function*` is a unique construct, different from `function`.\r\n\r\n    ```js\r\n    // bad\r\n    function * foo() {\r\n    }\r\n\r\n    const bar = function * () {\r\n    }\r\n\r\n    const baz = function *() {\r\n    }\r\n\r\n    const quux = function*() {\r\n    }\r\n\r\n    function*foo() {\r\n    }\r\n\r\n    function *foo() {\r\n    }\r\n\r\n    // very bad\r\n    function\r\n    *\r\n    foo() {\r\n    }\r\n\r\n    const wat = function\r\n    *\r\n    () {\r\n    }\r\n\r\n    // good\r\n    function* foo() {\r\n    }\r\n\r\n    const foo = function* () {\r\n    }\r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## Properties\r\n\r\n  <a name=\"properties--dot\"></a><a name=\"12.1\"></a>\r\n  - [12.1](#properties--dot) Use dot notation when accessing properties. eslint: [`dot-notation`](http://eslint.org/docs/rules/dot-notation.html)\r\n\r\n    ```javascript\r\n    const luke = {\r\n      jedi: true,\r\n      age: 28,\r\n    };\r\n\r\n    // bad\r\n    const isJedi = luke['jedi'];\r\n\r\n    // good\r\n    const isJedi = luke.jedi;\r\n    ```\r\n\r\n  <a name=\"properties--bracket\"></a><a name=\"12.2\"></a>\r\n  - [12.2](#properties--bracket) Use bracket notation `[]` when accessing properties with a variable.\r\n\r\n    ```javascript\r\n    const luke = {\r\n      jedi: true,\r\n      age: 28,\r\n    };\r\n\r\n    function getProp(prop) {\r\n      return luke[prop];\r\n    }\r\n\r\n    const isJedi = getProp('jedi');\r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## Variables\r\n\r\n  <a name=\"variables--const\"></a><a name=\"13.1\"></a>\r\n  - [13.1](#variables--const) Always use `const` to declare variables. Not doing so will result in global variables. We want to avoid polluting the global namespace. Captain Planet warned us of that.\r\n\r\n    ```javascript\r\n    // bad\r\n    superPower = new SuperPower();\r\n\r\n    // good\r\n    const superPower = new SuperPower();\r\n    ```\r\n\r\n  <a name=\"variables--one-const\"></a><a name=\"13.2\"></a>\r\n  - [13.2](#variables--one-const) Use one `const` declaration per variable. eslint: [`one-var`](http://eslint.org/docs/rules/one-var.html)\r\n\r\n    > Why? It's easier to add new variable declarations this way, and you never have to worry about swapping out a `;` for a `,` or introducing punctuation-only diffs. You can also step through each declaration with the debugger, instead of jumping through all of them at once.\r\n\r\n    ```javascript\r\n    // bad\r\n    const items = getItems(),\r\n        goSportsTeam = true,\r\n        dragonball = 'z';\r\n\r\n    // bad\r\n    // (compare to above, and try to spot the mistake)\r\n    const items = getItems(),\r\n        goSportsTeam = true;\r\n        dragonball = 'z';\r\n\r\n    // good\r\n    const items = getItems();\r\n    const goSportsTeam = true;\r\n    const dragonball = 'z';\r\n    ```\r\n\r\n  <a name=\"variables--const-let-group\"></a><a name=\"13.3\"></a>\r\n  - [13.3](#variables--const-let-group) Group all your `const`s and then group all your `let`s.\r\n\r\n    > Why? This is helpful when later on you might need to assign a variable depending on one of the previous assigned variables.\r\n\r\n    ```javascript\r\n    // bad\r\n    let i, len, dragonball,\r\n        items = getItems(),\r\n        goSportsTeam = true;\r\n\r\n    // bad\r\n    let i;\r\n    const items = getItems();\r\n    let dragonball;\r\n    const goSportsTeam = true;\r\n    let len;\r\n\r\n    // good\r\n    const goSportsTeam = true;\r\n    const items = getItems();\r\n    let dragonball;\r\n    let i;\r\n    let length;\r\n    ```\r\n\r\n  <a name=\"variables--define-where-used\"></a><a name=\"13.4\"></a>\r\n  - [13.4](#variables--define-where-used) Assign variables where you need them, but place them in a reasonable place.\r\n\r\n    > Why? `let` and `const` are block scoped and not function scoped.\r\n\r\n    ```javascript\r\n    // bad - unnecessary function call\r\n    function checkName(hasName) {\r\n      const name = getName();\r\n\r\n      if (hasName === 'test') {\r\n        return false;\r\n      }\r\n\r\n      if (name === 'test') {\r\n        this.setName('');\r\n        return false;\r\n      }\r\n\r\n      return name;\r\n    }\r\n\r\n    // good\r\n    function checkName(hasName) {\r\n      if (hasName === 'test') {\r\n        return false;\r\n      }\r\n\r\n      const name = getName();\r\n\r\n      if (name === 'test') {\r\n        this.setName('');\r\n        return false;\r\n      }\r\n\r\n      return name;\r\n    }\r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## Hoisting\r\n\r\n  <a name=\"hoisting--about\"></a><a name=\"14.1\"></a>\r\n  - [14.1](#hoisting--about) `var` declarations get hoisted to the top of their scope, their assignment does not. `const` and `let` declarations are blessed with a new concept called [Temporal Dead Zones (TDZ)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let). It's important to know why [typeof is no longer safe](http://es-discourse.com/t/why-typeof-is-no-longer-safe/15).\r\n\r\n    ```javascript\r\n    // we know this wouldn't work (assuming there\r\n    // is no notDefined global variable)\r\n    function example() {\r\n      console.log(notDefined); // => throws a ReferenceError\r\n    }\r\n\r\n    // creating a variable declaration after you\r\n    // reference the variable will work due to\r\n    // variable hoisting. Note: the assignment\r\n    // value of `true` is not hoisted.\r\n    function example() {\r\n      console.log(declaredButNotAssigned); // => undefined\r\n      var declaredButNotAssigned = true;\r\n    }\r\n\r\n    // the interpreter is hoisting the variable\r\n    // declaration to the top of the scope,\r\n    // which means our example could be rewritten as:\r\n    function example() {\r\n      let declaredButNotAssigned;\r\n      console.log(declaredButNotAssigned); // => undefined\r\n      declaredButNotAssigned = true;\r\n    }\r\n\r\n    // using const and let\r\n    function example() {\r\n      console.log(declaredButNotAssigned); // => throws a ReferenceError\r\n      console.log(typeof declaredButNotAssigned); // => throws a ReferenceError\r\n      const declaredButNotAssigned = true;\r\n    }\r\n    ```\r\n\r\n  <a name=\"hoisting--anon-expressions\"></a><a name=\"14.2\"></a>\r\n  - [14.2](#hoisting--anon-expressions) Anonymous function expressions hoist their variable name, but not the function assignment.\r\n\r\n    ```javascript\r\n    function example() {\r\n      console.log(anonymous); // => undefined\r\n\r\n      anonymous(); // => TypeError anonymous is not a function\r\n\r\n      var anonymous = function () {\r\n        console.log('anonymous function expression');\r\n      };\r\n    }\r\n    ```\r\n\r\n  <a name=\"hoisting--named-expresions\"></a><a name=\"14.3\"></a>\r\n  - [14.3](#hoisting--named-expresions) Named function expressions hoist the variable name, not the function name or the function body.\r\n\r\n    ```javascript\r\n    function example() {\r\n      console.log(named); // => undefined\r\n\r\n      named(); // => TypeError named is not a function\r\n\r\n      superPower(); // => ReferenceError superPower is not defined\r\n\r\n      var named = function superPower() {\r\n        console.log('Flying');\r\n      };\r\n    }\r\n\r\n    // the same is true when the function name\r\n    // is the same as the variable name.\r\n    function example() {\r\n      console.log(named); // => undefined\r\n\r\n      named(); // => TypeError named is not a function\r\n\r\n      var named = function named() {\r\n        console.log('named');\r\n      }\r\n    }\r\n    ```\r\n\r\n  <a name=\"hoisting--declarations\"></a><a name=\"14.4\"></a>\r\n  - [14.4](#hoisting--declarations) Function declarations hoist their name and the function body.\r\n\r\n    ```javascript\r\n    function example() {\r\n      superPower(); // => Flying\r\n\r\n      function superPower() {\r\n        console.log('Flying');\r\n      }\r\n    }\r\n    ```\r\n\r\n  - For more information refer to [JavaScript Scoping & Hoisting](http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting/) by [Ben Cherry](http://www.adequatelygood.com/).\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## Comparison Operators & Equality\r\n\r\n  <a name=\"comparison--eqeqeq\"></a><a name=\"15.1\"></a>\r\n  - [15.1](#comparison--eqeqeq) Use `===` and `!==` over `==` and `!=`. eslint: [`eqeqeq`](http://eslint.org/docs/rules/eqeqeq.html)\r\n\r\n  <a name=\"comparison--if\"></a><a name=\"15.2\"></a>\r\n  - [15.2](#comparison--if) Conditional statements such as the `if` statement evaluate their expression using coercion with the `ToBoolean` abstract method and always follow these simple rules:\r\n\r\n    + **Objects** evaluate to **true**\r\n    + **Undefined** evaluates to **false**\r\n    + **Null** evaluates to **false**\r\n    + **Booleans** evaluate to **the value of the boolean**\r\n    + **Numbers** evaluate to **false** if **+0, -0, or NaN**, otherwise **true**\r\n    + **Strings** evaluate to **false** if an empty string `''`, otherwise **true**\r\n\r\n    ```javascript\r\n    if ([0] && []) {\r\n      // true\r\n      // an array (even an empty one) is an object, objects will evaluate to true\r\n    }\r\n    ```\r\n\r\n  <a name=\"comparison--shortcuts\"></a><a name=\"15.3\"></a>\r\n  - [15.3](#comparison--shortcuts) Use shortcuts.\r\n\r\n    ```javascript\r\n    // bad\r\n    if (name !== '') {\r\n      // ...stuff...\r\n    }\r\n\r\n    // good\r\n    if (name) {\r\n      // ...stuff...\r\n    }\r\n\r\n    // bad\r\n    if (collection.length > 0) {\r\n      // ...stuff...\r\n    }\r\n\r\n    // good\r\n    if (collection.length) {\r\n      // ...stuff...\r\n    }\r\n    ```\r\n\r\n  <a name=\"comparison--moreinfo\"></a><a name=\"15.4\"></a>\r\n  - [15.4](#comparison--moreinfo) For more information see [Truth Equality and JavaScript](http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108) by Angus Croll.\r\n\r\n  <a name=\"comparison--switch-blocks\"></a><a name=\"15.5\"></a>\r\n  - [15.5](#comparison--switch-blocks) Use braces to create blocks in `case` and `default` clauses that contain lexical declarations (e.g. `let`, `const`, `function`, and `class`).\r\n\r\n  > Why? Lexical declarations are visible in the entire `switch` block but only get initialized when assigned, which only happens when its `case` is reached. This causes problems when multiple `case` clauses attempt to define the same thing.\r\n\r\n  eslint rules: [`no-case-declarations`](http://eslint.org/docs/rules/no-case-declarations.html).\r\n\r\n    ```javascript\r\n    // bad\r\n    switch (foo) {\r\n      case 1:\r\n        let x = 1;\r\n        break;\r\n      case 2:\r\n        const y = 2;\r\n        break;\r\n      case 3:\r\n        function f() {}\r\n        break;\r\n      default:\r\n        class C {}\r\n    }\r\n\r\n    // good\r\n    switch (foo) {\r\n      case 1: {\r\n        let x = 1;\r\n        break;\r\n      }\r\n      case 2: {\r\n        const y = 2;\r\n        break;\r\n      }\r\n      case 3: {\r\n        function f() {}\r\n        break;\r\n      }\r\n      case 4:\r\n        bar();\r\n        break;\r\n      default: {\r\n        class C {}\r\n      }\r\n    }\r\n    ```\r\n\r\n  <a name=\"comparison--nested-ternaries\"></a><a name=\"15.6\"></a>\r\n  - [15.6](#comparison--nested-ternaries) Ternaries should not be nested and generally be single line expressions.\r\n\r\n    eslint rules: [`no-nested-ternary`](http://eslint.org/docs/rules/no-nested-ternary.html).\r\n\r\n    ```javascript\r\n    // bad\r\n    const foo = maybe1 > maybe2\r\n      ? \"bar\"\r\n      : value1 > value2 ? \"baz\" : null;\r\n\r\n    // better\r\n    const maybeNull = value1 > value2 ? 'baz' : null;\r\n\r\n    const foo = maybe1 > maybe2\r\n      ? 'bar'\r\n      : maybeNull;\r\n\r\n    // best\r\n    const maybeNull = value1 > value2 ? 'baz' : null;\r\n\r\n    const foo = maybe1 > maybe2 ? 'bar' : maybeNull;\r\n    ```\r\n\r\n  <a name=\"comparison--unneeded-ternary\"></a><a name=\"15.7\"></a>\r\n  - [15.7](#comparison--unneeded-ternary) Avoid unneeded ternary statements.\r\n\r\n    eslint rules: [`no-unneeded-ternary`](http://eslint.org/docs/rules/no-unneeded-ternary.html).\r\n\r\n    ```javascript\r\n    // bad\r\n    const foo = a ? a : b;\r\n    const bar = c ? true : false;\r\n    const baz = c ? false : true;\r\n\r\n    // good\r\n    const foo = a || b;\r\n    const bar = !!c;\r\n    const baz = !c;\r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## Blocks\r\n\r\n  <a name=\"blocks--braces\"></a><a name=\"16.1\"></a>\r\n  - [16.1](#blocks--braces) Use braces with all multi-line blocks.\r\n\r\n    ```javascript\r\n    // bad\r\n    if (test)\r\n      return false;\r\n\r\n    // good\r\n    if (test) return false;\r\n\r\n    // good\r\n    if (test) {\r\n      return false;\r\n    }\r\n\r\n    // bad\r\n    function foo() { return false; }\r\n\r\n    // good\r\n    function bar() {\r\n      return false;\r\n    }\r\n    ```\r\n\r\n  <a name=\"blocks--cuddled-elses\"></a><a name=\"16.2\"></a>\r\n  - [16.2](#blocks--cuddled-elses) If you're using multi-line blocks with `if` and `else`, put `else` on the same line as your `if` block's closing brace. eslint: [`brace-style`](http://eslint.org/docs/rules/brace-style.html) jscs:  [`disallowNewlineBeforeBlockStatements`](http://jscs.info/rule/disallowNewlineBeforeBlockStatements)\r\n\r\n    ```javascript\r\n    // bad\r\n    if (test) {\r\n      thing1();\r\n      thing2();\r\n    }\r\n    else {\r\n      thing3();\r\n    }\r\n\r\n    // good\r\n    if (test) {\r\n      thing1();\r\n      thing2();\r\n    } else {\r\n      thing3();\r\n    }\r\n    ```\r\n\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## Comments\r\n\r\n  <a name=\"comments--multiline\"></a><a name=\"17.1\"></a>\r\n  - [17.1](#comments--multiline) Use `/** ... */` for multi-line comments. Include a description, specify types and values for all parameters and return values.\r\n\r\n    ```javascript\r\n    // bad\r\n    // make() returns a new element\r\n    // based on the passed in tag name\r\n    //\r\n    // @param {String} tag\r\n    // @return {Element} element\r\n    function make(tag) {\r\n\r\n      // ...stuff...\r\n\r\n      return element;\r\n    }\r\n\r\n    // good\r\n    /**\r\n     * make() returns a new element\r\n     * based on the passed in tag name\r\n     *\r\n     * @param {String} tag\r\n     * @return {Element} element\r\n     */\r\n    function make(tag) {\r\n\r\n      // ...stuff...\r\n\r\n      return element;\r\n    }\r\n    ```\r\n\r\n  <a name=\"comments--singleline\"></a><a name=\"17.2\"></a>\r\n  - [17.2](#comments--singleline) Use `//` for single line comments. Place single line comments on a newline above the subject of the comment. Put an empty line before the comment unless it's on the first line of a block.\r\n\r\n    ```javascript\r\n    // bad\r\n    const active = true;  // is current tab\r\n\r\n    // good\r\n    // is current tab\r\n    const active = true;\r\n\r\n    // bad\r\n    function getType() {\r\n      console.log('fetching type...');\r\n      // set the default type to 'no type'\r\n      const type = this._type || 'no type';\r\n\r\n      return type;\r\n    }\r\n\r\n    // good\r\n    function getType() {\r\n      console.log('fetching type...');\r\n\r\n      // set the default type to 'no type'\r\n      const type = this._type || 'no type';\r\n\r\n      return type;\r\n    }\r\n\r\n    // also good\r\n    function getType() {\r\n      // set the default type to 'no type'\r\n      const type = this._type || 'no type';\r\n\r\n      return type;\r\n    }\r\n    ```\r\n\r\n  <a name=\"comments--actionitems\"></a><a name=\"17.3\"></a>\r\n  - [17.3](#comments--actionitems) Prefixing your comments with `FIXME` or `TODO` helps other developers quickly understand if you're pointing out a problem that needs to be revisited, or if you're suggesting a solution to the problem that needs to be implemented. These are different than regular comments because they are actionable. The actions are `FIXME: -- need to figure this out` or `TODO: -- need to implement`.\r\n\r\n  <a name=\"comments--fixme\"></a><a name=\"17.4\"></a>\r\n  - [17.4](#comments--fixme) Use `// FIXME:` to annotate problems.\r\n\r\n    ```javascript\r\n    class Calculator extends Abacus {\r\n      constructor() {\r\n        super();\r\n\r\n        // FIXME: shouldn't use a global here\r\n        total = 0;\r\n      }\r\n    }\r\n    ```\r\n\r\n  <a name=\"comments--todo\"></a><a name=\"17.5\"></a>\r\n  - [17.5](#comments--todo) Use `// TODO:` to annotate solutions to problems.\r\n\r\n    ```javascript\r\n    class Calculator extends Abacus {\r\n      constructor() {\r\n        super();\r\n\r\n        // TODO: total should be configurable by an options param\r\n        this.total = 0;\r\n      }\r\n    }\r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## Whitespace\r\n\r\n  <a name=\"whitespace--spaces\"></a><a name=\"18.1\"></a>\r\n  - [18.1](#whitespace--spaces) Use soft tabs set to 2 spaces. eslint: [`indent`](http://eslint.org/docs/rules/indent.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    function foo() {\r\n    ∙∙∙∙const name;\r\n    }\r\n\r\n    // bad\r\n    function bar() {\r\n    ∙const name;\r\n    }\r\n\r\n    // good\r\n    function baz() {\r\n    ∙∙const name;\r\n    }\r\n    ```\r\n\r\n  <a name=\"whitespace--before-blocks\"></a><a name=\"18.2\"></a>\r\n  - [18.2](#whitespace--before-blocks) Place 1 space before the leading brace. eslint: [`space-before-blocks`](http://eslint.org/docs/rules/space-before-blocks.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    function test(){\r\n      console.log('test');\r\n    }\r\n\r\n    // good\r\n    function test() {\r\n      console.log('test');\r\n    }\r\n\r\n    // bad\r\n    dog.set('attr',{\r\n      age: '1 year',\r\n      breed: 'Bernese Mountain Dog',\r\n    });\r\n\r\n    // good\r\n    dog.set('attr', {\r\n      age: '1 year',\r\n      breed: 'Bernese Mountain Dog',\r\n    });\r\n    ```\r\n\r\n  <a name=\"whitespace--around-keywords\"></a><a name=\"18.3\"></a>\r\n  - [18.3](#whitespace--around-keywords) Place 1 space before the opening parenthesis in control statements (`if`, `while` etc.). Place no space between the argument list and the function name in function calls and declarations. eslint: [`keyword-spacing`](http://eslint.org/docs/rules/keyword-spacing.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    if(isJedi) {\r\n      fight ();\r\n    }\r\n\r\n    // good\r\n    if (isJedi) {\r\n      fight();\r\n    }\r\n\r\n    // bad\r\n    function fight () {\r\n      console.log ('Swooosh!');\r\n    }\r\n\r\n    // good\r\n    function fight() {\r\n      console.log('Swooosh!');\r\n    }\r\n    ```\r\n\r\n  <a name=\"whitespace--infix-ops\"></a><a name=\"18.4\"></a>\r\n  - [18.4](#whitespace--infix-ops) Set off operators with spaces. eslint: [`space-infix-ops`](http://eslint.org/docs/rules/space-infix-ops.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    const x=y+5;\r\n\r\n    // good\r\n    const x = y + 5;\r\n    ```\r\n\r\n  <a name=\"whitespace--newline-at-end\"></a><a name=\"18.5\"></a>\r\n  - [18.5](#whitespace--newline-at-end) End files with a single newline character. eslint: [`eol-last`](https://github.com/eslint/eslint/blob/master/docs/rules/eol-last.md)\r\n\r\n    ```javascript\r\n    // bad\r\n    (function (global) {\r\n      // ...stuff...\r\n    })(this);\r\n    ```\r\n\r\n    ```javascript\r\n    // bad\r\n    (function (global) {\r\n      // ...stuff...\r\n    })(this);↵\r\n    ↵\r\n    ```\r\n\r\n    ```javascript\r\n    // good\r\n    (function (global) {\r\n      // ...stuff...\r\n    })(this);↵\r\n    ```\r\n\r\n  <a name=\"whitespace--chains\"></a><a name=\"18.6\"></a>\r\n  - [18.6](#whitespace--chains) Use indentation when making long method chains (more than 2 method chains). Use a leading dot, which\r\n    emphasizes that the line is a method call, not a new statement. eslint: [`newline-per-chained-call`](http://eslint.org/docs/rules/newline-per-chained-call) [`no-whitespace-before-property`](http://eslint.org/docs/rules/no-whitespace-before-property)\r\n\r\n    ```javascript\r\n    // bad\r\n    $('#items').find('.selected').highlight().end().find('.open').updateCount();\r\n\r\n    // bad\r\n    $('#items').\r\n      find('.selected').\r\n        highlight().\r\n        end().\r\n      find('.open').\r\n        updateCount();\r\n\r\n    // good\r\n    $('#items')\r\n      .find('.selected')\r\n        .highlight()\r\n        .end()\r\n      .find('.open')\r\n        .updateCount();\r\n\r\n    // bad\r\n    const leds = stage.selectAll('.led').data(data).enter().append('svg:svg').classed('led', true)\r\n        .attr('width', (radius + margin) * 2).append('svg:g')\r\n        .attr('transform', 'translate(' + (radius + margin) + ',' + (radius + margin) + ')')\r\n        .call(tron.led);\r\n\r\n    // good\r\n    const leds = stage.selectAll('.led')\r\n        .data(data)\r\n      .enter().append('svg:svg')\r\n        .classed('led', true)\r\n        .attr('width', (radius + margin) * 2)\r\n      .append('svg:g')\r\n        .attr('transform', 'translate(' + (radius + margin) + ',' + (radius + margin) + ')')\r\n        .call(tron.led);\r\n\r\n    // good\r\n    const leds = stage.selectAll('.led').data(data);\r\n    ```\r\n\r\n  <a name=\"whitespace--after-blocks\"></a><a name=\"18.7\"></a>\r\n  - [18.7](#whitespace--after-blocks) Leave a blank line after blocks and before the next statement.\r\n\r\n    ```javascript\r\n    // bad\r\n    if (foo) {\r\n      return bar;\r\n    }\r\n    return baz;\r\n\r\n    // good\r\n    if (foo) {\r\n      return bar;\r\n    }\r\n\r\n    return baz;\r\n\r\n    // bad\r\n    const obj = {\r\n      foo() {\r\n      },\r\n      bar() {\r\n      },\r\n    };\r\n    return obj;\r\n\r\n    // good\r\n    const obj = {\r\n      foo() {\r\n      },\r\n\r\n      bar() {\r\n      },\r\n    };\r\n\r\n    return obj;\r\n\r\n    // bad\r\n    const arr = [\r\n      function foo() {\r\n      },\r\n      function bar() {\r\n      },\r\n    ];\r\n    return arr;\r\n\r\n    // good\r\n    const arr = [\r\n      function foo() {\r\n      },\r\n\r\n      function bar() {\r\n      },\r\n    ];\r\n\r\n    return arr;\r\n    ```\r\n\r\n  <a name=\"whitespace--padded-blocks\"></a><a name=\"18.8\"></a>\r\n  - [18.8](#whitespace--padded-blocks) Do not pad your blocks with blank lines. eslint: [`padded-blocks`](http://eslint.org/docs/rules/padded-blocks.html) jscs:  [`disallowPaddingNewlinesInBlocks`](http://jscs.info/rule/disallowPaddingNewlinesInBlocks)\r\n\r\n    ```javascript\r\n    // bad\r\n    function bar() {\r\n\r\n      console.log(foo);\r\n\r\n    }\r\n\r\n    // also bad\r\n    if (baz) {\r\n\r\n      console.log(qux);\r\n    } else {\r\n      console.log(foo);\r\n\r\n    }\r\n\r\n    // good\r\n    function bar() {\r\n      console.log(foo);\r\n    }\r\n\r\n    // good\r\n    if (baz) {\r\n      console.log(qux);\r\n    } else {\r\n      console.log(foo);\r\n    }\r\n    ```\r\n\r\n  <a name=\"whitespace--in-parens\"></a><a name=\"18.9\"></a>\r\n  - [18.9](#whitespace--in-parens) Do not add spaces inside parentheses. eslint: [`space-in-parens`](http://eslint.org/docs/rules/space-in-parens.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    function bar( foo ) {\r\n      return foo;\r\n    }\r\n\r\n    // good\r\n    function bar(foo) {\r\n      return foo;\r\n    }\r\n\r\n    // bad\r\n    if ( foo ) {\r\n      console.log(foo);\r\n    }\r\n\r\n    // good\r\n    if (foo) {\r\n      console.log(foo);\r\n    }\r\n    ```\r\n\r\n  <a name=\"whitespace--in-brackets\"></a><a name=\"18.10\"></a>\r\n  - [18.10](#whitespace--in-brackets) Do not add spaces inside brackets. eslint: [`array-bracket-spacing`](http://eslint.org/docs/rules/array-bracket-spacing.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    const foo = [ 1, 2, 3 ];\r\n    console.log(foo[ 0 ]);\r\n\r\n    // good\r\n    const foo = [1, 2, 3];\r\n    console.log(foo[0]);\r\n    ```\r\n\r\n  <a name=\"whitespace--in-braces\"></a><a name=\"18.11\"></a>\r\n  - [18.11](#whitespace--in-braces) Add spaces inside curly braces. eslint: [`object-curly-spacing`](http://eslint.org/docs/rules/object-curly-spacing.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    const foo = {clark: 'kent'};\r\n\r\n    // good\r\n    const foo = { clark: 'kent' };\r\n    ```\r\n\r\n  <a name=\"whitespace--max-len\"></a><a name=\"18.12\"></a>\r\n  - [18.12](#whitespace--max-len) Avoid having lines of code that are longer than 100 characters (including whitespace). eslint: [`max-len`](http://eslint.org/docs/rules/max-len.html)\r\n\r\n    > Why? This ensures readability and maintainability.\r\n\r\n    ```javascript\r\n    // bad\r\n    const foo = 'Whatever national crop flips the window. The cartoon reverts within the screw. Whatever wizard constrains a helpful ally. The counterpart ascends!';\r\n\r\n    // bad\r\n    $.ajax({ method: 'POST', url: 'https://sslcom.com/', data: { name: 'John' } }).done(() => console.log('Congratulations!')).fail(() => console.log('You have failed this city.'));\r\n\r\n    // good\r\n    const foo = 'Whatever national crop flips the window. The cartoon reverts within the screw. ' +\r\n      'Whatever wizard constrains a helpful ally. The counterpart ascends!';\r\n\r\n    // good\r\n    $.ajax({\r\n      method: 'POST',\r\n      url: 'https://sslcom.com/',\r\n      data: { name: 'John' },\r\n    })\r\n      .done(() => console.log('Congratulations!'))\r\n      .fail(() => console.log('You have failed this city.'));\r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n## Commas\r\n\r\n<a name=\"commas--leading-trailing\"></a><a name=\"19.1\"></a>\r\n  - [19.1](#commas--leading-trailing) Leading commas: **Nope.** eslint: [`comma-style`](http://eslint.org/docs/rules/comma-style.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    const story = [\r\n        once\r\n      , upon\r\n      , aTime\r\n    ];\r\n\r\n    // good\r\n    const story = [\r\n      once,\r\n      upon,\r\n      aTime,\r\n    ];\r\n\r\n    // bad\r\n    const hero = {\r\n        firstName: 'Ada'\r\n      , lastName: 'Lovelace'\r\n      , birthYear: 1815\r\n      , superPower: 'computers'\r\n    };\r\n\r\n    // good\r\n    const hero = {\r\n      firstName: 'Ada',\r\n      lastName: 'Lovelace',\r\n      birthYear: 1815,\r\n      superPower: 'computers',\r\n    };\r\n    ```\r\n\r\n  <a name=\"commas--dangling\"></a><a name=\"19.2\"></a>\r\n  - [19.2](#commas--dangling) Additional trailing comma: **Yup.** eslint: [`comma-dangle`](http://eslint.org/docs/rules/comma-dangle.html)\r\n\r\n    > Why? This leads to cleaner git diffs. Also, transpilers like Babel will remove the additional trailing comma in the transpiled code which means you don't have to worry about the [trailing comma problem](es5/README.md#commas) in legacy browsers.\r\n\r\n    ```javascript\r\n    // bad - git diff without trailing comma\r\n    const hero = {\r\n         firstName: 'Florence',\r\n    -    lastName: 'Nightingale'\r\n    +    lastName: 'Nightingale',\r\n    +    inventorOf: ['coxcomb chart', 'modern nursing']\r\n    };\r\n\r\n    // good - git diff with trailing comma\r\n    const hero = {\r\n         firstName: 'Florence',\r\n         lastName: 'Nightingale',\r\n    +    inventorOf: ['coxcomb chart', 'modern nursing'],\r\n    };\r\n\r\n    // bad\r\n    const hero = {\r\n      firstName: 'Dana',\r\n      lastName: 'Scully'\r\n    };\r\n\r\n    const heroes = [\r\n      'Batman',\r\n      'Superman'\r\n    ];\r\n\r\n    // good\r\n    const hero = {\r\n      firstName: 'Dana',\r\n      lastName: 'Scully',\r\n    };\r\n\r\n    const heroes = [\r\n      'Batman',\r\n      'Superman',\r\n    ];\r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## Semicolons\r\n\r\n  <a name=\"semicolons--required\"></a><a name=\"20.1\"></a>\r\n  - [20.1](#20.1) Required for ES5 and below. eslint: [`semi`](http://eslint.org/docs/rules/semi.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    (function () {\r\n      const name = 'Skywalker'\r\n      return name\r\n    })()\r\n\r\n    // good\r\n    (function () {\r\n      const name = 'Skywalker';\r\n      return name;\r\n    }());\r\n\r\n    // good, but legacy (guards against the function becoming an argument when two files with IIFEs are concatenated)\r\n    ;(() => {\r\n      const name = 'Skywalker';\r\n      return name;\r\n    }());\r\n    [Read more](http://stackoverflow.com/questions/7365172/semicolon-before-self-invoking-function/7365214%237365214).\r\n    ```\r\n\r\n  <a name=\"semicolons--required\"></a><a name=\"20.2\"></a>\r\n  - [20.2](#20.2) Not allowed for ES6+. eslint: [`semi`](http://eslint.org/docs/rules/semi.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    (function () {\r\n      const name = 'Skywalker';\r\n      return name;\r\n    })();\r\n\r\n    // good\r\n    (function () {\r\n      const name = 'Skywalker'\r\n      return name\r\n    }())\r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## Type Casting & Coercion\r\n\r\n  <a name=\"coercion--explicit\"></a><a name=\"21.1\"></a>\r\n  - [21.1](#coercion--explicit) Perform type coercion at the beginning of the statement.\r\n\r\n  <a name=\"coercion--strings\"></a><a name=\"21.2\"></a>\r\n  - [21.2](#coercion--strings)  Strings:\r\n\r\n    ```javascript\r\n    // => this.reviewScore = 9;\r\n\r\n    // bad\r\n    const totalScore = this.reviewScore + ''; // invokes this.reviewScore.valueOf()\r\n\r\n    // bad\r\n    const totalScore = this.reviewScore.toString(); // isn't guaranteed to return a string\r\n\r\n    // good\r\n    const totalScore = String(this.reviewScore);\r\n    ```\r\n\r\n  <a name=\"coercion--numbers\"></a><a name=\"21.3\"></a>\r\n  - [21.3](#coercion--numbers) Numbers: Use `Number` for type casting and `parseInt` always with a radix for parsing strings. eslint: [`radix`](http://eslint.org/docs/rules/radix)\r\n\r\n    ```javascript\r\n    const inputValue = '4';\r\n\r\n    // bad\r\n    const val = new Number(inputValue);\r\n\r\n    // bad\r\n    const val = +inputValue;\r\n\r\n    // bad\r\n    const val = inputValue >> 0;\r\n\r\n    // bad\r\n    const val = parseInt(inputValue);\r\n\r\n    // good\r\n    const val = Number(inputValue);\r\n\r\n    // good\r\n    const val = parseInt(inputValue, 10);\r\n    ```\r\n\r\n  <a name=\"coercion--comment-deviations\"></a><a name=\"21.4\"></a>\r\n  - [21.4](#coercion--comment-deviations) If for whatever reason you are doing something wild and `parseInt` is your bottleneck and need to use Bitshift for [performance reasons](http://jsperf.com/coercion-vs-casting/3), leave a comment explaining why and what you're doing.\r\n\r\n    ```javascript\r\n    // good\r\n    /**\r\n     * parseInt was the reason my code was slow.\r\n     * Bitshifting the String to coerce it to a\r\n     * Number made it a lot faster.\r\n     */\r\n    const val = inputValue >> 0;\r\n    ```\r\n\r\n  <a name=\"coercion--bitwise\"></a><a name=\"21.5\"></a>\r\n  - [21.5](#coercion--bitwise) **Note:** Be careful when using bitshift operations. Numbers are represented as [64-bit values](http://es5.github.io/#x4.3.19), but bitshift operations always return a 32-bit integer ([source](http://es5.github.io/#x11.7)). Bitshift can lead to unexpected behavior for integer values larger than 32 bits. [Discussion](https://github.com/sslcom/javascript/issues/109). Largest signed 32-bit Int is 2,147,483,647:\r\n\r\n    ```javascript\r\n    2147483647 >> 0 //=> 2147483647\r\n    2147483648 >> 0 //=> -2147483648\r\n    2147483649 >> 0 //=> -2147483647\r\n    ```\r\n\r\n  <a name=\"coercion--booleans\"></a><a name=\"21.6\"></a>\r\n  - [21.6](#coercion--booleans) Booleans:\r\n\r\n    ```javascript\r\n    const age = 0;\r\n\r\n    // bad\r\n    const hasAge = new Boolean(age);\r\n\r\n    // good\r\n    const hasAge = Boolean(age);\r\n\r\n    // best\r\n    const hasAge = !!age;\r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## Naming Conventions\r\n\r\n  <a name=\"naming--descriptive\"></a><a name=\"22.1\"></a>\r\n  - [22.1](#naming--descriptive) Avoid single letter names. Be descriptive with your naming.\r\n\r\n    ```javascript\r\n    // bad\r\n    function q() {\r\n      // ...stuff...\r\n    }\r\n\r\n    // good\r\n    function query() {\r\n      // ..stuff..\r\n    }\r\n    ```\r\n\r\n  <a name=\"naming--camelCase\"></a><a name=\"22.2\"></a>\r\n  - [22.2](#naming--camelCase) Use camelCase when naming objects, functions, and instances. eslint: [`camelcase`](http://eslint.org/docs/rules/camelcase.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    const OBJEcttsssss = {};\r\n    const this_is_my_object = {};\r\n    function c() {}\r\n\r\n    // good\r\n    const thisIsMyObject = {};\r\n    function thisIsMyFunction() {}\r\n    ```\r\n\r\n  <a name=\"naming--PascalCase\"></a><a name=\"22.3\"></a>\r\n  - [22.3](#naming--PascalCase) Use PascalCase only when naming constructors or classes. eslint: [`new-cap`](http://eslint.org/docs/rules/new-cap.html)\r\n\r\n    ```javascript\r\n    // bad\r\n    function user(options) {\r\n      this.name = options.name;\r\n    }\r\n\r\n    const bad = new user({\r\n      name: 'nope',\r\n    });\r\n\r\n    // good\r\n    class User {\r\n      constructor(options) {\r\n        this.name = options.name;\r\n      }\r\n    }\r\n\r\n    const good = new User({\r\n      name: 'yup',\r\n    });\r\n    ```\r\n\r\n  <a name=\"naming--leading-underscore\"></a><a name=\"22.4\"></a>\r\n  - [22.4](#naming--leading-underscore) Do not use trailing or leading underscores. eslint: [`no-underscore-dangle`](http://eslint.org/docs/rules/no-underscore-dangle.html)\r\n\r\n    > Why? JavaScript does not have the concept of privacy in terms of properties or methods. Although a leading underscore is a common convention to mean “private”, in fact, these properties are fully public, and as such, are part of your public API contract. This convention might lead developers to wrongly think that a change won't count as breaking, or that tests aren't needed. tl;dr: if you want something to be “private”, it must not be observably present.\r\n\r\n    ```javascript\r\n    // bad\r\n    this.__firstName__ = 'Panda';\r\n    this.firstName_ = 'Panda';\r\n    this._firstName = 'Panda';\r\n\r\n    // good\r\n    this.firstName = 'Panda';\r\n    ```\r\n\r\n  <a name=\"naming--self-this\"></a><a name=\"22.5\"></a>\r\n  - [22.5](#naming--self-this) Don't save references to `this`. Use arrow functions or [Function#bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\r\n\r\n    ```javascript\r\n    // bad\r\n    function foo() {\r\n      const self = this;\r\n      return function () {\r\n        console.log(self);\r\n      };\r\n    }\r\n\r\n    // bad\r\n    function foo() {\r\n      const that = this;\r\n      return function () {\r\n        console.log(that);\r\n      };\r\n    }\r\n\r\n    // good\r\n    function foo() {\r\n      return () => {\r\n        console.log(this);\r\n      };\r\n    }\r\n    ```\r\n\r\n  <a name=\"naming--filename-matches-export\"></a><a name=\"22.6\"></a>\r\n  - [22.6](#naming--filename-matches-export) A base filename should exactly match the name of its default export.\r\n\r\n    ```javascript\r\n    // file 1 contents\r\n    class CheckBox {\r\n      // ...\r\n    }\r\n    export default CheckBox;\r\n\r\n    // file 2 contents\r\n    export default function fortyTwo() { return 42; }\r\n\r\n    // file 3 contents\r\n    export default function insideDirectory() {}\r\n\r\n    // in some other file\r\n    // bad\r\n    import CheckBox from './checkBox'; // PascalCase import/export, camelCase filename\r\n    import FortyTwo from './FortyTwo'; // PascalCase import/filename, camelCase export\r\n    import InsideDirectory from './InsideDirectory'; // PascalCase import/filename, camelCase export\r\n\r\n    // bad\r\n    import CheckBox from './check_box'; // PascalCase import/export, snake_case filename\r\n    import forty_two from './forty_two'; // snake_case import/filename, camelCase export\r\n    import inside_directory from './inside_directory'; // snake_case import, camelCase export\r\n    import index from './inside_directory/index'; // requiring the index file explicitly\r\n    import insideDirectory from './insideDirectory/index'; // requiring the index file explicitly\r\n\r\n    // good\r\n    import CheckBox from './CheckBox'; // PascalCase export/import/filename\r\n    import fortyTwo from './fortyTwo'; // camelCase export/import/filename\r\n    import insideDirectory from './insideDirectory'; // camelCase export/import/directory name/implicit \"index\"\r\n    // ^ supports both insideDirectory.js and insideDirectory/index.js\r\n    ```\r\n\r\n  <a name=\"naming--camelCase-default-export\"></a><a name=\"22.7\"></a>\r\n  - [22.7](#naming--camelCase-default-export) Use camelCase when you export-default a function. Your filename should be identical to your function's name.\r\n\r\n    ```javascript\r\n    function makeStyleGuide() {\r\n    }\r\n\r\n    export default makeStyleGuide;\r\n    ```\r\n\r\n  <a name=\"naming--PascalCase-singleton\"></a><a name=\"22.8\"></a>\r\n  - [22.8](#naming--PascalCase-singleton) Use PascalCase when you export a constructor / class / singleton / function library / bare object.\r\n\r\n    ```javascript\r\n    const SslcomStyleGuide = {\r\n      es6: {\r\n      }\r\n    };\r\n\r\n    export default SslcomStyleGuide;\r\n    ```\r\n\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## Accessors\r\n\r\n  <a name=\"accessors--not-required\"></a><a name=\"23.1\"></a>\r\n  - [23.1](#accessors--not-required) Accessor functions for properties are not required.\r\n\r\n  <a name=\"accessors--no-getters-setters\"></a><a name=\"23.2\"></a>\r\n  - [23.2](#accessors--no-getters-setters) Do not use JavaScript getters/setters as they cause unexpected side effects and are harder to test, maintain, and reason about. Instead, if you do make accessor functions, use getVal() and setVal('hello').\r\n\r\n    ```javascript\r\n    // bad\r\n    class Dragon {\r\n      get age() {\r\n        // ...\r\n      }\r\n\r\n      set age(value) {\r\n        // ...\r\n      }\r\n    }\r\n\r\n    // good\r\n    class Dragon {\r\n      getAge() {\r\n        // ...\r\n      }\r\n\r\n      setAge(value) {\r\n        // ...\r\n      }\r\n    }\r\n    ```\r\n\r\n  <a name=\"accessors--boolean-prefix\"></a><a name=\"23.3\"></a>\r\n  - [23.3](#accessors--boolean-prefix) If the property/method is a `boolean`, use `isVal()` or `hasVal()`.\r\n\r\n    ```javascript\r\n    // bad\r\n    if (!dragon.age()) {\r\n      return false;\r\n    }\r\n\r\n    // good\r\n    if (!dragon.hasAge()) {\r\n      return false;\r\n    }\r\n    ```\r\n\r\n  <a name=\"accessors--consistent\"></a><a name=\"23.4\"></a>\r\n  - [23.4](#accessors--consistent) It's okay to create get() and set() functions, but be consistent.\r\n\r\n    ```javascript\r\n    class Jedi {\r\n      constructor(options = {}) {\r\n        const lightsaber = options.lightsaber || 'blue';\r\n        this.set('lightsaber', lightsaber);\r\n      }\r\n\r\n      set(key, val) {\r\n        this[key] = val;\r\n      }\r\n\r\n      get(key) {\r\n        return this[key];\r\n      }\r\n    }\r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## Events\r\n\r\n  <a name=\"events--hash\"></a><a name=\"24.1\"></a>\r\n  - [24.1](#events--hash) When attaching data payloads to events (whether DOM events or something more proprietary like Backbone events), pass a hash instead of a raw value. This allows a subsequent contributor to add more data to the event payload without finding and updating every handler for the event. For example, instead of:\r\n\r\n    ```javascript\r\n    // bad\r\n    $(this).trigger('listingUpdated', listing.id);\r\n\r\n    ...\r\n\r\n    $(this).on('listingUpdated', (e, listingId) => {\r\n      // do something with listingId\r\n    });\r\n    ```\r\n\r\n    prefer:\r\n\r\n    ```javascript\r\n    // good\r\n    $(this).trigger('listingUpdated', { listingId: listing.id });\r\n\r\n    ...\r\n\r\n    $(this).on('listingUpdated', (e, data) => {\r\n      // do something with data.listingId\r\n    });\r\n    ```\r\n\r\n  **[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## jQuery\r\n\r\n  <a name=\"jquery--avoid\"></a><a name=\"25.0\"></a>\r\n  - [25.0](#jquery--avoid) It's a good idea to completely avoid using jQuery. Please don't use it.\r\n    - [You Don't Need jQuery](https://github.com/oneuijs/You-Dont-Need-jQuery)\r\n    - jQuery is very large\r\n    - jQuery is hard to test\r\n    - jQuery promotes DOM-centric programming, even for computation. This is extremely slow.\r\n    - jQuery does not comply with many ECMAScript standards, Ex: [Promises don't follow the standard](https://thewayofcode.wordpress.com/2013/01/22/javascript-promises-and-why-jquery-implementation-is-broken/). This can lead to broken and unpredictable code.\r\n    - jQuery is _really_ slow compared to other libraries and vanillajs\r\n\r\n  <a name=\"jquery--compat\"></a><a name=\"25.1\"></a>\r\n  - [25.1](#jquery--compat) Use the `jQuery` function instead of the shorthand `$` for compatability.\r\n\r\n    ```javascript\r\n    // bad\r\n    const $sidebar = $('.sidebar');\r\n\r\n    // good\r\n    const $sidebar = jQuery('.sidebar');\r\n    ```\r\n\r\n  <a name=\"jquery--dollar-prefix\"></a><a name=\"25.2\"></a>\r\n  - [25.2](#jquery--dollar-prefix) Prefix jQuery object variables with a `$`.\r\n\r\n    ```javascript\r\n    // bad\r\n    const sidebar = jQuery('.sidebar');\r\n\r\n    // good\r\n    const $sidebar = jQuery('.sidebar');\r\n\r\n    // good\r\n    const $sidebarBtn = jQuery('.sidebar-btn');\r\n    ```\r\n\r\n  <a name=\"jquery--cache\"></a><a name=\"25.2\"></a>\r\n  - [25.2](#jquery--cache) Cache jQuery lookups.\r\n\r\n    ```javascript\r\n    // bad\r\n    function setSidebar() {\r\n      jQuery('.sidebar').hide();\r\n\r\n      // ...stuff...\r\n\r\n      jQuery('.sidebar').css({\r\n        'background-color': 'pink'\r\n      });\r\n    }\r\n\r\n    // good\r\n    function setSidebar() {\r\n      const $sidebar = jQuery('.sidebar');\r\n      $sidebar.hide();\r\n\r\n      // ...stuff...\r\n\r\n      $sidebar.css({\r\n        'background-color': 'pink'\r\n      });\r\n    }\r\n    ```\r\n\r\n  <a name=\"jquery--queries\"></a><a name=\"25.3\"></a>\r\n  - [25.3](#jquery--queries) For DOM queries use Cascading `jQuery('.sidebar ul')` or parent > child `jQuery('.sidebar > ul')`. [jsPerf](http://jsperf.com/jquery-find-vs-context-sel/16)\r\n\r\n  <a name=\"jquery--find\"></a><a name=\"25.4\"></a>\r\n  - [25.4](#jquery--find) Use `find` with scoped jQuery object queries.\r\n\r\n    ```javascript\r\n    // bad\r\n    jQuery('ul', '.sidebar').hide();\r\n\r\n    // bad\r\n    jQuery('.sidebar').find('ul').hide();\r\n\r\n    // good\r\n    jQuery('.sidebar ul').hide();\r\n\r\n    // good\r\n    jQuery('.sidebar > ul').hide();\r\n\r\n    // good\r\n    $sidebar.find('ul').hide();\r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## ECMAScript 5 Compatibility\r\n\r\n  <a name=\"es5-compat--kangax\"></a><a name=\"26.1\"></a>\r\n  - [26.1](#es5-compat--kangax) Refer to [Kangax](https://twitter.com/kangax/)'s ES5 [compatibility table](http://kangax.github.io/es5-compat-table/).\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n## ECMAScript 6 Styles\r\n\r\n  <a name=\"es6-styles\"></a><a name=\"27.1\"></a>\r\n  - [27.1](#es6-styles) This is a collection of links to the various ES6 features.\r\n\r\n1. [Arrow Functions](#arrow-functions)\r\n1. [Classes](#constructors)\r\n1. [Object Shorthand](#es6-object-shorthand)\r\n1. [Object Concise](#es6-object-concise)\r\n1. [Object Computed Properties](#es6-computed-properties)\r\n1. [Template Strings](#es6-template-literals)\r\n1. [Destructuring](#destructuring)\r\n1. [Default Parameters](#es6-default-parameters)\r\n1. [Rest](#es6-rest)\r\n1. [Array Spreads](#es6-array-spreads)\r\n1. [Let and Const](#references)\r\n1. [Iterators and Generators](#iterators-and-generators)\r\n1. [Modules](#modules)\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n## Testing\r\n\r\n  <a name=\"testing--yup\"></a><a name=\"28.1\"></a>\r\n  - [28.1](#testing--yup) **Yup.**\r\n\r\n    ```javascript\r\n    function foo() {\r\n      return true;\r\n    }\r\n    ```\r\n\r\n  <a name=\"testing--for-real\"></a><a name=\"28.2\"></a>\r\n  - [28.2](#testing--for-real) **No, but seriously**:\r\n   - Whichever testing framework you use, you should be writing tests!\r\n   - Strive to write many small pure functions, and minimize where mutations occur.\r\n   - Be cautious about stubs and mocks - they can make your tests more brittle.\r\n   - We primarily use [`mocha`](https://www.npmjs.com/package/mocha) with [`chai`](https://www.npmjs.com/package/chai) at SSL.com.\r\n   - 100% test coverage is a good goal to strive for, even if it's not always practical to reach it.\r\n   - Whenever you fix a bug, _write a regression test_. A bug fixed without a regression test is almost certainly going to break again in the future.\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## Performance\r\n\r\n  - [On Layout & Web Performance](http://www.kellegous.com/j/2013/01/26/layout-performance/)\r\n  - [String vs Array Concat](http://jsperf.com/string-vs-array-concat/2)\r\n  - [Try/Catch Cost In a Loop](http://jsperf.com/try-catch-in-loop-cost)\r\n  - [Bang Function](http://jsperf.com/bang-function)\r\n  - [jQuery Find vs Context, Selector](http://jsperf.com/jquery-find-vs-context-sel/13)\r\n  - [innerHTML vs textContent for script text](http://jsperf.com/innerhtml-vs-textcontent-for-script-text)\r\n  - [Long String Concatenation](http://jsperf.com/ya-string-concat)\r\n  - [Are Javascript functions like `map()`, `reduce()`, and `filter()` optimized for traversing arrays?](https://www.quora.com/JavaScript-programming-language-Are-Javascript-functions-like-map-reduce-and-filter-already-optimized-for-traversing-array/answer/Quildreen-Motta)\r\n  - Loading...\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## Resources\r\n\r\n**Learning ES6**\r\n\r\n  - [Draft ECMA 2015 (ES6) Spec](https://people.mozilla.org/~jorendorff/es6-draft.html)\r\n  - [ExploringJS](http://exploringjs.com/)\r\n  - [ES6 Compatibility Table](https://kangax.github.io/compat-table/es6/)\r\n  - [Comprehensive Overview of ES6 Features](http://es6-features.org/)\r\n\r\n**Read This**\r\n\r\n  - [Standard ECMA-262](http://www.ecma-international.org/ecma-262/6.0/index.html)\r\n\r\n**Tools**\r\n\r\n  - Code Style Linters\r\n    + [ESlint](http://eslint.org/) - [SSL.com Style .eslintrc](https://github.com/sslcom/javascript/blob/master/linters/.eslintrc)\r\n\r\n**Other Style Guides**\r\n\r\n  - [Google JavaScript Style Guide](https://google.github.io/styleguide/javascriptguide.xml)\r\n  - [jQuery Core Style Guidelines](http://contribute.jquery.org/style-guide/js/)\r\n  - [Principles of Writing Consistent, Idiomatic JavaScript](https://github.com/rwaldron/idiomatic.js)\r\n\r\n**Other Styles**\r\n\r\n  - [Naming this in nested functions](https://gist.github.com/cjohansen/4135065) - Christian Johansen\r\n  - [Conditional Callbacks](https://github.com/sslcom/javascript/issues/52) - Ross Allen\r\n  - [Popular JavaScript Coding Conventions on Github](http://sideeffect.kr/popularconvention/#javascript) - JeongHoon Byun\r\n  - [Multiple var statements in JavaScript, not superfluous](http://benalman.com/news/2012/05/multiple-var-statements-javascript/) - Ben Alman\r\n\r\n**Further Reading**\r\n\r\n  - [Understanding JavaScript Closures](http://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/) - Angus Croll\r\n  - [Basic JavaScript for the impatient programmer](http://www.2ality.com/2013/06/basic-javascript.html) - Dr. Axel Rauschmayer\r\n  - [You Might Not Need jQuery](http://youmightnotneedjquery.com/) - Zack Bloom & Adam Schwartz\r\n  - [ES6 Features](https://github.com/lukehoban/es6features) - Luke Hoban\r\n  - [Frontend Guidelines](https://github.com/bendc/frontend-guidelines) - Benjamin De Cock\r\n\r\n**Books**\r\n\r\n  - [JavaScript: The Good Parts](http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742) - Douglas Crockford\r\n  - [JavaScript Patterns](http://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752) - Stoyan Stefanov\r\n  - [Pro JavaScript Design Patterns](http://www.amazon.com/JavaScript-Design-Patterns-Recipes-Problem-Solution/dp/159059908X)  - Ross Harmes and Dustin Diaz\r\n  - [High Performance Web Sites: Essential Knowledge for Front-End Engineers](http://www.amazon.com/High-Performance-Web-Sites-Essential/dp/0596529309) - Steve Souders\r\n  - [Maintainable JavaScript](http://www.amazon.com/Maintainable-JavaScript-Nicholas-C-Zakas/dp/1449327680) - Nicholas C. Zakas\r\n  - [JavaScript Web Applications](http://www.amazon.com/JavaScript-Web-Applications-Alex-MacCaw/dp/144930351X) - Alex MacCaw\r\n  - [Pro JavaScript Techniques](http://www.amazon.com/Pro-JavaScript-Techniques-John-Resig/dp/1590597273) - John Resig\r\n  - [Smashing Node.js: JavaScript Everywhere](http://www.amazon.com/Smashing-Node-js-JavaScript-Everywhere-Magazine/dp/1119962595) - Guillermo Rauch\r\n  - [Secrets of the JavaScript Ninja](http://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/193398869X) - John Resig and Bear Bibeault\r\n  - [Human JavaScript](http://humanjavascript.com/) - Henrik Joreteg\r\n  - [Superhero.js](http://superherojs.com/) - Kim Joar Bekkelund, Mads Mobæk, & Olav Bjorkoy\r\n  - [JSBooks](http://jsbooks.revolunet.com/) - Julien Bouquillon\r\n  - [Third Party JavaScript](https://www.manning.com/books/third-party-javascript) - Ben Vinegar and Anton Kovalyov\r\n  - [Effective JavaScript: 68 Specific Ways to Harness the Power of JavaScript](http://amzn.com/0321812182) - David Herman\r\n  - [Eloquent JavaScript](http://eloquentjavascript.net/) - Marijn Haverbeke\r\n  - [You Don't Know JS: ES6 & Beyond](http://shop.oreilly.com/product/0636920033769.do) - Kyle Simpson\r\n\r\n**Blogs**\r\n\r\n  - [DailyJS](http://dailyjs.com/)\r\n  - [JavaScript Weekly](http://javascriptweekly.com/)\r\n  - [JavaScript, JavaScript...](http://javascriptweblog.wordpress.com/)\r\n  - [Bocoup Weblog](https://bocoup.com/weblog)\r\n  - [Adequately Good](http://www.adequatelygood.com/)\r\n  - [NCZOnline](https://www.nczonline.net/)\r\n  - [Perfection Kills](http://perfectionkills.com/)\r\n  - [Ben Alman](http://benalman.com/)\r\n  - [Dmitry Baranovskiy](http://dmitry.baranovskiy.com/)\r\n  - [Dustin Diaz](http://dustindiaz.com/)\r\n  - [nettuts](http://code.tutsplus.com/?s=javascript)\r\n\r\n**Podcasts**\r\n\r\n  - [JavaScript Jabber](https://devchat.tv/js-jabber/)\r\n\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n## The JavaScript Style Guide Guide\r\n\r\n  - [Reference](https://github.com/sslcom/javascript/wiki/The-JavaScript-Style-Guide-Guide)\r\n\r\n## Contributors\r\n\r\n  - [View Contributors](https://github.com/sslcom/javascript/graphs/contributors)\r\n\r\n\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2016 SSL.com\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n## Amendments\r\n\r\nWe encourage you to fork this guide and change the rules to fit your team's style guide. Below, you may list some amendments to the style guide. This allows you to periodically update your style guide without having to deal with merge conflicts.\r\n\r\n# };\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}